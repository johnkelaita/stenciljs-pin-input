/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';




export namespace Components {

  interface CmpDisplay {
    'autoSubmit': boolean;
    'hide': boolean;
    'inp': string;
    'maxLen': number;
    'showLength': boolean;
  }
  interface CmpDisplayAttributes extends StencilHTMLAttributes {
    'autoSubmit'?: boolean;
    'hide'?: boolean;
    'inp'?: string;
    'maxLen'?: number;
    'onPinDone'?: (event: CustomEvent) => void;
    'showLength'?: boolean;
  }

  interface CmpButton {
    /**
    * The button text and value
    */
    'value': string;
  }
  interface CmpButtonAttributes extends StencilHTMLAttributes {
    'onButtonInput'?: (event: CustomEvent) => void;
    /**
    * The button text and value
    */
    'value'?: string;
  }

  interface CmpKeypad {
    'hideOk': boolean;
    'shuffle': boolean;
  }
  interface CmpKeypadAttributes extends StencilHTMLAttributes {
    'hideOk'?: boolean;
    'onNumInput'?: (event: CustomEvent) => void;
    'shuffle'?: boolean;
  }

  interface PinPanel {
    'autoSubmit': boolean;
    'hideDigitDisplay': boolean;
    'maxPinLength': number;
    'showPinLength': boolean;
    'shuffleKeypad': boolean;
  }
  interface PinPanelAttributes extends StencilHTMLAttributes {
    'autoSubmit'?: boolean;
    'hideDigitDisplay'?: boolean;
    'maxPinLength'?: number;
    'onPinDone'?: (event: CustomEvent) => void;
    'showPinLength'?: boolean;
    'shuffleKeypad'?: boolean;
  }
}

declare global {
  interface StencilElementInterfaces {
    'CmpDisplay': Components.CmpDisplay;
    'CmpButton': Components.CmpButton;
    'CmpKeypad': Components.CmpKeypad;
    'PinPanel': Components.PinPanel;
  }

  interface StencilIntrinsicElements {
    'cmp-display': Components.CmpDisplayAttributes;
    'cmp-button': Components.CmpButtonAttributes;
    'cmp-keypad': Components.CmpKeypadAttributes;
    'pin-panel': Components.PinPanelAttributes;
  }


  interface HTMLCmpDisplayElement extends Components.CmpDisplay, HTMLStencilElement {}
  var HTMLCmpDisplayElement: {
    prototype: HTMLCmpDisplayElement;
    new (): HTMLCmpDisplayElement;
  };

  interface HTMLCmpButtonElement extends Components.CmpButton, HTMLStencilElement {}
  var HTMLCmpButtonElement: {
    prototype: HTMLCmpButtonElement;
    new (): HTMLCmpButtonElement;
  };

  interface HTMLCmpKeypadElement extends Components.CmpKeypad, HTMLStencilElement {}
  var HTMLCmpKeypadElement: {
    prototype: HTMLCmpKeypadElement;
    new (): HTMLCmpKeypadElement;
  };

  interface HTMLPinPanelElement extends Components.PinPanel, HTMLStencilElement {}
  var HTMLPinPanelElement: {
    prototype: HTMLPinPanelElement;
    new (): HTMLPinPanelElement;
  };

  interface HTMLElementTagNameMap {
    'cmp-display': HTMLCmpDisplayElement
    'cmp-button': HTMLCmpButtonElement
    'cmp-keypad': HTMLCmpKeypadElement
    'pin-panel': HTMLPinPanelElement
  }

  interface ElementTagNameMap {
    'cmp-display': HTMLCmpDisplayElement;
    'cmp-button': HTMLCmpButtonElement;
    'cmp-keypad': HTMLCmpKeypadElement;
    'pin-panel': HTMLPinPanelElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
